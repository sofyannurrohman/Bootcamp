---
config:
  theme: mc
---
classDiagram
    class MainWindow {
        -ChessGameService game
        -AIMoveService aiMoveService
        -Button[,] boardButtons
        -(int, int)? selectedSquare
        -List<(int, int)> possibleMoves
        +MainWindow()
        -InitializeBoard()
        -DrawBoard()
        -Square_Click()
        -HandlePromotion()
        -UpdateGameStatus()
        -SuggestMoveBtn_Click()
    }
    class ChessGameService {
        +Board Board
        +PieceColor CurrentTurn
        +(int, int)? PendingPromotion
        -MoveValidatorService _moveValidator
        -CastlingService _castlingService
        -EnPassantService _enPassantService
        -GameStateService _gameStateService
        +ChessGameService()
        +bool MovePiece((int, int) from, (int, int) to)
        +void PromotePawn((int, int) position, string newPiece)
        +List<(int, int)> GetPossibleMoves(int row, int col)
        +bool IsCheck()
        +bool IsCheckmate(PieceColor color)
        +bool IsStalemate(PieceColor color)
    }
    class MoveValidatorService {
        -Board _board
        -CastlingService _castlingService
        -EnPassantService _enPassantService
        +Board Board
        +MoveValidatorService(Board, EnPassantService)
        +void SetCastlingService(CastlingService)
        +bool IsValidMove((int, int) from, (int, int) to, PieceColor currentTurn)
        +List<(int, int)> GetPossibleMoves(int row, int col, PieceColor currentTurn)
        +bool IsInCheck(PieceColor color)
        +bool IsSquareAttacked((int, int) square, PieceColor attackerColor)
        +List<(int, int)> GetRawMoves(int row, int col, ChessPiece piece)
        -List<(int, int)> GetPawnMoves(int row, int col, PieceColor color)
        -List<(int, int)> GetRookMoves(int row, int col, PieceColor color)
        -List<(int, int)> GetKnightMoves(int row, int col, PieceColor color)
        -List<(int, int)> GetBishopMoves(int row, int col, PieceColor color)
        -List<(int, int)> GetQueenMoves(int row, int col, PieceColor color)
        -List<(int, int)> GetKingMoves(int row, int col, PieceColor color)
        -bool AddMoveOrStop(List<(int, int)> moves, int row, int col, PieceColor color)
        -bool IsInsideBoard(int row, int col)
    }
    class CastlingService {
        -MoveValidatorService _moveValidator
        +bool WhiteKingMoved
        +bool BlackKingMoved
        +bool WhiteRookLeftMoved
        +bool WhiteRookRightMoved
        +bool BlackRookLeftMoved
        +bool BlackRookRightMoved
        +CastlingService(MoveValidatorService)
        +List<(int, int)> GetCastlingMoves(int row, int col, PieceColor color, PieceColor currentTurn)
        +void UpdateCastlingRights((int, int) from, ChessPiece piece)
        -bool CanCastleKingside(int row, PieceColor color)
        -bool CanCastleQueenside(int row, PieceColor color)
    }
    class EnPassantService {
        +(int, int)? EnPassantTarget
        +List<(int, int)> GetEnPassantMoves(int row, int col, PieceColor color)
        +void UpdateEnPassantTarget((int, int) from, (int, int) to, ChessPiece piece)
    }
    class GameStateService {
        -MoveValidatorService _moveValidator
        +GameStateService(MoveValidatorService)
        +bool IsCheckmate(PieceColor color)
        +bool IsStalemate(PieceColor color)
        -bool HasNoLegalMoves(PieceColor color)
    }
    class AIMoveService {
        -HttpClient _httpClient
        -string _apiKey
        -ChessGameService _chessGame
        +AIMoveService(ChessGameService, string apiKey)
        +Task<(string move, string explanation)> GetAIMoveSuggestionAsync()
        -string ConvertToFEN(Board board, PieceColor currentTurn)
        -char PieceToFENChar(ChessPiece piece)
        -(string move, string explanation) ParseAIResponse(string response)
    }
    class LocalMoveAnalyzer {
        -ChessGameService _chessGame
        +LocalMoveAnalyzer(ChessGameService)
        +(string move, string explanation) GetMoveSuggestion()
        -((int, int) from, (int, int) to)? FindBestMove(int depth)
        -int EvaluateMove((int, int) from, (int, int) to, int depth)
        -int GetPieceValue(PieceType type)
        -List<((int, int) from, (int, int) to)> GetAllLegalMoves()
        -string ConvertToAlgebraicNotation((int, int) from, (int, int) to)
        -string GenerateExplanation((int, int) from, (int, int) to)
    }
    class Board {
        +ChessPiece[,] Squares
        +Board()
        -InitializeBoard()
    }
    class ChessPiece {
        +PieceType Type
        +PieceColor Color
        +ChessPiece(PieceType type, PieceColor color)
    }
    class PieceType {
        <<enumeration>>
        Pawn
        Rook
        Knight
        Bishop
        Queen
        King
    }
    class PieceColor {
        <<enumeration>>
        White
        Black
    }
    class IBoardService {
        <<interface>>
        +Board Board
        +bool IsSquareAttacked((int, int) square, PieceColor attackerColor)
        +bool IsInCheck(PieceColor color)
        +List<(int, int)> GetRawMoves(int row, int col, ChessPiece piece)
    }
    MainWindow --> ChessGameService : uses
    MainWindow --> AIMoveService : uses
    ChessGameService --> MoveValidatorService : composes
    ChessGameService --> CastlingService : composes
    ChessGameService --> EnPassantService : composes
    ChessGameService --> GameStateService : composes
    MoveValidatorService --> Board : uses
    MoveValidatorService --> CastlingService : uses
    MoveValidatorService --> EnPassantService : uses
    CastlingService --> MoveValidatorService : uses
    GameStateService --> MoveValidatorService : uses
    AIMoveService --> ChessGameService : uses
    LocalMoveAnalyzer --> ChessGameService : uses
    MoveValidatorService ..|> IBoardService : implements
    Board --> ChessPiece : contains
    ChessPiece --> PieceType : has
    ChessPiece --> PieceColor : has
    MoveValidatorService --> ChessPiece : uses
    CastlingService --> ChessPiece : uses
    EnPassantService --> ChessPiece : uses
    GameStateService --> ChessPiece : uses
    AIMoveService --> ChessPiece : uses
    LocalMoveAnalyzer --> ChessPiece : uses
