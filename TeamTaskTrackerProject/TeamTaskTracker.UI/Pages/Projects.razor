@page "/projects"
@inject NavigationManager Navigation

<AuthorizeView>
    <Authorized>
        <h1>Welcome Home!</h1>
    </Authorized>
    <NotAuthorized>
        @code {
            protected override void OnInitialized()
            {
                Navigation.NavigateTo("/login");
            }
        }
    </NotAuthorized>
</AuthorizeView>
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h2 class="text-2xl font-semibold mb-4">Projects</h2>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="bg-red-100 text-red-700 p-4 rounded mb-4">
        @errorMessage
    </div>
}
else if (projects == null)
{
    <div class="text-gray-600">Loading projects...</div>
}
else if (!projects.Any())
{
    <div class="text-gray-600">No projects found.</div>
}
else
{
    <div class="overflow-x-auto">
        <table class="min-w-full bg-white rounded shadow overflow-hidden">
            <thead class="bg-gray-200 text-left">
                <tr>
                    <th class="px-4 py-2">ID</th>
                    <th class="px-4 py-2">Name</th>
                    <th class="px-4 py-2">Goal Period</th>
                    <th class="px-4 py-2">Start</th>
                    <th class="px-4 py-2">End</th>
                    <th class="px-4 py-2">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var project in projects)
                {
                    <tr class="border-b hover:bg-gray-50">
                        <td class="px-4 py-2">@project.Id</td>
                        <td class="px-4 py-2">@project.Name</td>
                        <td class="px-4 py-2">@project.GoalPeriod</td>
                        <td class="px-4 py-2">@project.StartDate.ToShortDateString()</td>
                        <td class="px-4 py-2">@project.EndDate.ToShortDateString()</td>
                        <td class="px-4 py-2 space-x-2">
                            <button class="bg-blue-500 text-white px-2 py-1 rounded" @onclick="() => EditProject(project.Id)">Edit</button>
                            <button class="bg-red-500 text-white px-2 py-1 rounded" @onclick="() => DeleteProject(project.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<ProjectDto>? projects;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            projects = await Http.GetFromJsonAsync<List<ProjectDto>>(
                "api/Project",
                new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true }
            );
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load projects: {ex.Message}";
        }
    }

    private void EditProject(int projectId)
    {
        Navigation.NavigateTo($"/projects/edit/{projectId}");
    }

    private async Task DeleteProject(int projectId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete project {projectId}?");
        if (!confirmed) return;

        var response = await Http.DeleteAsync($"api/Project/{projectId}");
        if (response.IsSuccessStatusCode)
        {
            projects = projects?.Where(p => p.Id != projectId).ToList();
        }
    }

    public class ProjectDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string GoalPeriod { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }
}
