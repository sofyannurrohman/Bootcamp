@page "/register"
@layout LoginLayout
@inject HttpClient Http
@inject NavigationManager Navigation


@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="bg-red-100 text-red-700 p-3 rounded mb-4 text-center">
        @errorMessage
    </div>
}

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="bg-white p-8 rounded-lg shadow-md space-y-4">
    <h2 class="text-3xl font-bold text-center mb-6 text-gray-800">Create an Account</h2>

        <div>
            <label class="block text-gray-700 mb-1">Email</label>
            <InputText @bind-Value="registerModel.Email" placeholder="Email" class="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-green-500" />
        </div>
        <div>
            <label class="block text-gray-700 mb-1">Password</label>
            <InputText @bind-Value="registerModel.Password" type="password" placeholder="Password" class="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-green-500" />
        </div>
        <button type="submit" class="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700 transition-colors">
            Register
        </button>
        <p class="text-center text-gray-600 text-sm">
            Already have an account? 
            <a href="/login" class="text-blue-600 hover:underline">Login here</a>
        </p>
    </div>
</EditForm>

@code {
    private RegisterModel registerModel = new();
    private string? errorMessage;

    private async Task HandleRegister()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/User/Register", registerModel);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                errorMessage = !string.IsNullOrEmpty(content) ? content : "Failed to register";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    public class RegisterModel
    {
        public string Email { get; set; } = null!;
        public string Password { get; set; } = null!;
    }
}
